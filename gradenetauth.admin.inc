<?php
/*
 * @file
 * Administration page callbacks
 */

function gradenetauth_settings_form() {
  $form = array();
  
  // Check if phpFlickr.php is in place
  _gradenetauth_check_libaries();
  
  $form['gradenetauth_serverurl'] = array(
    '#type' => 'textfield',
    '#title' => t('Gradenet URL'),
    '#maxlength' => 500,
    '#required' => true,
    '#description' => t('URL to Gradenet Instance'),
    '#default_value' => variable_get('gradenetauth_serverurl', NULL),
  );
  
  $form['gradenetauth_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Gradenet API Token'),
    '#maxlength' => 500,
    '#required' => true,
    '#description' => t('API Token generated by Gradenet Instance'),
    '#default_value' => variable_get('gradenetauth_apitoken', NULL),
  );

  $form['gradenetauth_user_group'] = array(
    '#type' => 'select',
    '#title' => t('Select default Gradenet user role'),
    '#default_value' => variable_get('gradenetauth_user_role', '0'),
    '#options' => user_roles(),
  );
  
  $form['#submit'][] = 'gradenetauth_settings_form_submit';
  
  return system_settings_form($form);
}

/**
 * Submit function for the settins form
 * Also creates the cache dir if option is checked
 */
function gradenetauth_settings_form_submit($form, &$form_state) {

  variable_set('gradenetauth_serverurl', $form['gradenetauth_serverurl']['#value']);
  variable_set('gradenetauth_apitoken', $form['gradenetauth_token']['#value']);
  variable_set('gradenetauth_user_role', $form['gradenetauth_user_group']['#value']);

}


function gradenetauth_configure_form($form, &$form_state) {

die("configure");

  $config = array();
  // Get the config from the form state.
  if (!empty($form_state['values'])) {
    $config = $form_state['values'];
  }

  // Merge in the default configuration.
  $config += gradenetauth_get_config();

  // Don't display the config form if this delta is exported to code.
  if (!empty($config['exported_to_code'])) {
    $form['exported_message'] = array(
      '#markup' => '<p><em>' . t('Configuration is being provided by code.') . '</em></p>',
    );
    return $form;
  }

  // // Build the standard form.
  // $form['#attached']['js'][] = drupal_get_path('module', 'menu_block') . '/menu-block.js';
  // $form['#attached']['css'][] = drupal_get_path('module', 'menu_block') . '/menu-block-admin.css';
  // $form['#attached']['library'][] = array('system', 'ui.button');

  $form['menu-block-wrapper-start'] = array(
    '#markup' => '<div id="calendar-block-settings">',
    '#weight' => -20,
  );

  $form['ics_admin_title'] = array(
    '#type' => 'textfield',
    '#default_value' => $config['ics_admin_title'],
    '#title' => t('Administrative title'),
    '#description' => t('This title will be used administratively to identify this block. If blank, the regular title will be used.'),
  );
  

  $form['gradenetauth_ics'] = array(
    '#type' => 'textfield',
    '#maxlength' => 500,
    '#title' => t('ICS Feed'),
    '#description' => t('URL to ICS feed'),
    '#default_value' => $config['gradenetauth_ics'],
  );

  $form['ics_type'] = array(
    '#type' => 'select',
    '#title' => t('Calendar Type'),
    '#default_value' => $config['ics_type'],
    '#options' => array(
      'month'  => t('Month View'),
      'week'  => t('Week View'),
      'upcoming'  => t('Upcoming Events View'),
      'upcoming_list'  => t('Upcoming Events List View'),
    ),
  );


  $timeout_options = array(
    "0" => t('0 minutes'),
    "60" => t('1 minute'),
    "300" => t('5 minutes'),
    "3600" => t('1 hour'),
    "21600" =>  t('6 hours'),
    "43200" =>  t('12 hours'),
    "86400" =>  t('24 hours'),
  );
  $form['gradenetauth_cache_timeout'] = array(
    '#type' => 'select',
    '#title' => t('Select cache timeout.'),
    '#description' => t('Select the amount of time to cache the ics feed.'),
    '#default_value' => $config['gradenetauth_cache_timeout'],
    '#options' => $timeout_options,
  );

  // $form['display_options'] = array(
  //   '#type' => 'radios',
  //   '#title' => t('Display'),
  //   '#default_value' => 'basic',
  //   '#options' => array(
  //     'basic' => t('Basic options'),
  //     'advanced' => t('Advanced options'),
  //   ),
  //   '#attributes' => array('class' => array('clearfix')),
  //   '#weight' => -19,
  // );
  // $form['title_link'] = array(
  //   '#type' => 'checkbox',
  //   '#title' => t('Block title as link'),
  //   '#default_value' => $config['title_link'],
  //   '#description' => t('Make the default block title a link to that menu item. An overridden block title will not be a link.'),
  //   '#states' => array(
  //     'visible' => array(
  //       ':input[name=title]' => array('value' => ''),
  //     ),
  //   ),
  // );
  $form['menu-block-wrapper-close'] = array('#markup' => '</div>');

  // // Set visibility of advanced options.
  // foreach (array('title_link', 'follow', 'follow_parent', 'expanded', 'sort', 'parent_mlid') as $key) {
  //   $form[$key]['#states']['visible'][':input[name=display_options]'] = array('value' => 'advanced');
  // }
  // if ($config['title_link'] || $follow || $config['expanded'] || $config['sort'] || $config['parent_mlid']) {
  //   $form['display_options']['#default_value'] = 'advanced';
  // }

  return $form;
}


