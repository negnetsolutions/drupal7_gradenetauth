<?php

function _gradenetauth_load_libaries()
{
  if( _gradenetauth_check_libaries() ) {
    require_once libraries_get_path('php_gradenet_api') . "/gradenet_api.class.php";
    return true;
  }

  return false;
}
function _gradenetauth_check_libaries()
{
  $library_path = libraries_get_path('php_gradenet_api');
  if( file_exists($library_path.'/gradenet_api.class.php') ) {
    return true;
  }
  else {
    if (user_access('administer settings')) {
      drupal_set_message(t('You need to download and place php_gradenet_api inside sites/all/libraries/php_gradenet_api:') . ' ' . l(t('https://github.com/negnetsolutions/php_gradenet_api'), 'https://github.com/negnetsolutions/php_gradenet_api'), 'error');
    }
    return FALSE;
  }
}


/**
* Implementation of hook_permission()
*/
function gradenetauth_permission() {
  return array(
    'administer gradenet authentication settings' => array(
      'title' => t('Administer Gradenet Authentication Settings'), 
      'description' => t('Administer the settings for Gradenet Authentication'),
    ),
  );
}

/*
* Implementation of hook_menu()
*/
function gradenetauth_menu() {
  $items = array();
  
  $items['admin/config/people/gradenetauth'] = array(
    'title' => 'Gradenet Authentication',
    'description' => 'Configure options for Gradenet User Authentication',
    'page callback' => 'gradenetauth_admin_settings',
    'access arguments' => array('administer gradenet authentication settings'),
    'file' => 'gradenetauth.admin.inc',
  );
  return $items;
}
function gradenetauth_admin_settings() {
  return drupal_get_form('gradenetauth_settings_form');
}
/**
* Implement hook_help() to display a small help message if somebody clicks the "Help" link on the modules list.
*/
function gradenetauth_help( $path, $arg )
{
    switch ( $path )
    {
        case 'admin/help#gradenetauth':
        {
            return( '<p>' . t('This module allows users who login with e-mail addresses to authenticate off an external system.') . '</p>' );
        }
    }
}

/**
   * Implement hook_form_alter() to change the behaviour of the login form.
   *
   * Login validators are set in the user_login_default_validators() function in user.module.
   * They are normally set to array('user_login_name_validate',
   * 'user_login_authenticate_validate', 'user_login_final_validate').
   * We simply replace 'user_login_authenticate_validate' with 'gradenetauth_login_validate'.
   */
function gradenetauth_form_user_login_alter( &$form, $form_state )
{
    unset($form['links']);
    $form['#validate'] = array( 'user_login_name_validate', 'gradenetauth_login_validate', 'user_login_final_validate' );
}

function gradenetauth_form_user_login_block_alter( &$form, $form_state )
{
    return gradenetauth_form_user_login_alter( $form, $form_state );
}

/**
* Implement hook_user_profile_form_alter() to disable the ability to change email address and
* password for externally authenticated users.
*/
function gradenetauth_form_user_profile_form_alter( &$form, $form_state )
{
    if (preg_match("/[0-9]{3}[-]{1}[0-9]{2}[-]{1}[0-9]{4}/u", $form['#user']->name))
    {
        $form['account']['name']['#disabled'] = TRUE;
        $form['account']['name']['#description'] = t('The username for this account cannot be changed');
        $form['account']['mail']['#disabled'] = TRUE;
        $form['account']['mail']['#description'] = t('This e-mail address for this account cannot be changed.');
        $form['account']['current_pass']['#disabled'] = TRUE;
        $form['account']['current_pass']['#description'] = t('Neither the email address or password for this account can be changed.');
        $form['account']['pass']['#disabled'] = TRUE;
        $form['account']['pass']['#description'] = t('The password for this account cannot be changed.');
    }
}

/**
* The gradenetauth_login_validate() function attempts to authenticate a user off the external system
* using their e-mail address.
*/
function gradenetauth_login_validate( $form, &$form_state )
{
    global $user;

    $username = $form_state['values']['name'];

    //check to see if the username matches a Gradenet user but doesn't have 
    //hyphens. Add Hyphens if need be
    if( preg_match("/[0-9]{3}[0-9]{2}[0-9]{4}/u", $username) ) {
      $username = substr($username,0,3).'-'.substr($username,3,2).'-'.substr($username,5,4);
      $form_state['values']['name'] = $username;
    }
    
    // In our case we're assuming that any username that is numeric or has 
    // hyphens is a gradenet uid
    // hence we're going to check the credentials against our external system.
    if ( preg_match("/[0-9]{3}[-]{1}[0-9]{2}[-]{1}[0-9]{4}/u", $username) )
    {
        // Looks like we found them - now we need to check if the password is correct
        if ( ($user_info=validateExternalUser( $username, $form_state['values']['pass'] )) !== false )
        {
            //register or create the user
            user_external_login_register( $username, 'gradenetauth' );

            $account = user_load($user->uid); // Loading account
            $edit = array(
              'field_full_name' => array(
                'und' => array(
                  0 => array(
                    'value' => $user_info['name'],
                  ),
                ),
              )
            );
            user_save($account, $edit);

            //update user account info
            db_update( 'users' )->fields( array( 'mail' => $user_info['email'], 'signature' => $user_info['name'] ))
              
              ->condition( 'uid', $user->uid, '=' )
              ->execute();
            
            // I wish we didn't have to do this, but I couldn't find any other way to get the
            // uid at this point
            $form_state['uid'] = $user->uid;
        } // else drop through to the end and return nothing - Drupal will handle the rejection
    }
    else
    {
        // Username is not an e-mail address, so use standard Drupal authentication function
        user_login_authenticate_validate( $form, $form_state );
    }
}

/**
* The gradenetauth_user_insert() function gets called by Drupal AFTER a new user has been added.
* If the e-mail address has already been set then we don't want to overwrite it, as the user
* is probably being added manually. Thankfully the only time a user can be added without the
* e-mail being set is when an external user gets authenticated for the first time, at which
* point a user is inserted into the database without an e-mail address, which is the case we
* will deal with in this function.
*/

function gradenetauth_user_insert( &$edit, &$account, $category = null )
{
    // Remember: this function gets called whenever a new user is added, not just when a new
    // user is being added as a result of them being externally authenticated. So we need to
    // avoid running the following checks if the user is being added by some other means (eg.
    // manually by the administrator). In this simple example we're assuming that any user ID
    // that is an email address is externally authenticated. However, there are possibly
    // better ways to do this, such as look up the authmaps table and see if there is a row
    // for this user where module is 'gradenetauth'.
    
    if ( preg_match("/[0-9]{3}[-]{1}[0-9]{2}[-]{1}[0-9]{4}/u", $account->name) )
    {
        // Note: you can do other stuff here, like set the password to be the md5 hash of the
        // remote password. This might be handy if you wanted to allow people to log on when
        // the external system is unavailable, but, of course, it introduces the hassle of
        // keeping the passwords in sync.

        // This is where we set that additional role to indicate that the user is authenticated
        // externally. Note that EXTERNAL_AUTH_RID is defined as 3 in this sample code but you
        // should set it to whatever Role ID is appropriate in your case, eg. create the new
        // role, do a query to find the RID for that role and set EXTERNAL_AUTH_RID to that RID.
        $account->roles[variable_get('gradenetauth_user_role', '0')] = 'Gradenet_Authenticated';
    }
}

function _getGradenetApiObject()
{
    _gradenetauth_load_libaries();
    
    $api = gradenet_api::getInstance()
      ->setServer(variable_get('gradenetauth_serverurl', NULL))
      ->setToken(variable_get('gradenetauth_apitoken', NULL))
    ;

    return $api;
}
/**
* This is the helper function that you will need to modify in order to invoke your external
* authentication mechanism.
*/
function validateExternalUser( $username, $password )
{
    $api = _getGradenetApiObject();
    try {
      return $api->authenticate($username,$password);
    }
    catch (Exception $e) {
      watchdog("Gradenetauth Error",$e->getMessage(), array(), WATCHDOG_ERROR);
      return FALSE;
    }
}

